snippet today "Date"
`date +%F`
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet frame "frame{}" bA
\begin{frame}{$1}
	$0
\end{frame}
endsnippet

snippet sec "section{}" bA
\section{$1}$0
endsnippet

snippet ssec "subsection{}" bA
\subsection{$1}$0
endsnippet

snippet sssec "subsubsection{}" bA
\subsubsection{$1}$0
endsnippet

snippet ssssec "subsubsubsection{}" bA
\subsubsubsection{$1}$0
endsnippet

snippet sssssec "subsubsubsubsection{}" bA
\subsubsubsubsection{$1}$0
endsnippet

snippet href "href" wA
\href{$1}{$2}$0
endsnippet

snippet list "itemize" bA
\begin{itemize}
	\item $1
\end{itemize}$0
endsnippet

snippet enum "enumerate" bA
\begin{enumerate}
	\item $1
\end{enumerate}$0
endsnippet

snippet it "item" bA
\item $0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
snippet sr "^2" i
^2
endsnippet

snippet cb "^3" i
^3
endsnippet

snippet compl "complement" i
^{c}
endsnippet

snippet td "superscript" i
^{$1}$0
endsnippet

snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

snippet wrap "wrap figure" b
\begin{wrapfigure}{$1}{$2cm}
	\centering
	\includegraphics[width=$3cm]{pic/$4}
	\caption{$4}
	\label{fig:$4}
\end{wrapfigure}$0
endsnippet

snippet pic "insert picture" b
\begin{figure}[H]
	\centering
	\includegraphics[width=$1\textwidth]{pic/$2}
	\caption{$2}
	\label{fig:$2}
\end{figure}$0
endsnippet

snippet pic2 "insert pictures" b
\begin{figure}[H]
	\centering
	\subfigure[$2]{
		\includegraphics[height=$1]{pic/$2}
	}
	\subfigure[$3]{
		\includegraphics[height=$1]{pic/$3}
	}
	\caption{$4}
	\label{fig:$4}
\end{figure}$0
endsnippet

snippet minipage "two columns minipage" b
\hspace{-2.8em}\begin{tabular}{l l}
	\begin{minipage}{$1\textwidth}
		$3
	\end{minipage}
	&
	\begin{minipage}{$2\textwidth}
		$4
	\end{minipage}
\end{tabular}$0
endsnippet

snippet codee "code frame" b
\begin{lstlisting}[language=$1]
$2
\end{lstlisting}$0
endsnippet

snippet txt "text file" b
\lstinputlisting{$1}$0
endsnippet

snippet code "code file" b
\lstinputlisting[style=codestyle]{code/$1}$0
endsnippet

snippet mar "marginnote" bA
\marginpar{
	$1
}$0
endsnippet

